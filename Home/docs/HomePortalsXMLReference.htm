<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>HomePortals XML Reference</title>
<link rel="stylesheet" type="text/css" href="main.css">
</head>

<body class="body">
<h1>HomePortals Page XML Reference</h1>
<p>This document describes the tags used to build a HomePortals page document. </p>
<p>&nbsp;</p>
<h3><a name="page" id="page">&lt;Page&gt;</a> </h3>
<p><strong>Description:</strong><br />
  This is the root node of the  document. All tags must be children of this tag.</p>
<p><strong>Attributes:</strong><br />
  <em>None</em></p>
<hr />
<h3><a name="title" id="title">&lt;title&gt;</a></h3>
<p><strong>Description:</strong><br />
  Title for the page  described in the current XML. This title will be displayed as the title of the  resulting HTML document. This tag should appear only once per document.</p>
<p><strong>Attributes:</strong><br />
  <em>None</em></p>
<hr />
<h3><a name="stylesheet" id="stylesheet">&lt;stylesheet&gt;</a></h3>
<p><strong>Description:</strong><br />
  Declares a CSS  (Cascading Stylesheet) resource on the generated HTML. The CSS will affect all HTML generated by the  modules and by the framework itself. The developer may override the default CSS  styles of the framework by redefining the appropriate classes and IDs. The stylesheet tag may be used several times to indicate the use of more than one CSS  resource. </p>
<p><strong>Attributes:</strong></p>
<table border="1" cellspacing="0" cellpadding="0">
  <tr>
    <td width="95" valign="top"><strong>Name</strong> </td>
    <td width="80" valign="top"><p><strong>Type</strong></p></td>
    <td width="482" valign="top"><p><strong>Description</strong></p></td>
  </tr>
  <tr>
    <td width="95" valign="top"><p>href</p></td>
    <td width="80" valign="top"><p>URI</p></td>
    <td width="482" valign="top"><p><strong>Required. </strong>URI    of the stylesheet. May be either an absolute or relative location. If using a    relative location, it will be relative to the framework directory. You may    also use web server mappings.</p></td>
  </tr>
</table>
<blockquote>
  <p><strong>Notes:<br />
</strong>(1) By default the HomePortals engine includes the following       stylesheet on the generated HTML: <em><br />
<br />
&lt;HomePortals root&gt;</em>/common/css/main.css<br />
    <br />
    This file contains the default styles for rendering layout regions and module containers.  The cascading functionality of CSS allows the developer to override the  appearance of any HTML object generated by HomePortals by re-defining CSS rules.</p>
  <p>(2) You may use the HomePortals administrator to change the CSS resources that will be included on any rendered page. To access the HomePortals Administrator, go to <em>&lt;HomePortals root&gt;</em>/admin. Also you may change the CSS resources by manually edit the HomePortals configuration file. This is located at <em>&lt;HomePortals root&gt;</em>/config.xml.</p>
</blockquote>
<hr />
<h3><a name="script" id="script">&lt;script&gt;</a></h3>
<p><strong>Description:</strong><br />
  This tag declares a JavaScript  resource. A HomePortals page can have any number of linked JavaScripts. </p>
<p><strong>Attributes:</strong></p>
<table border="1" cellspacing="0" cellpadding="0">
  <tr>
    <td width="79" valign="top"><strong>Name</strong> </td>
    <td width="72" valign="top"><p><strong>Type</strong></p></td>
    <td width="506" valign="top"><p><strong>Description</strong></p></td>
  </tr>
  <tr>
    <td width="79" valign="top"><p>src<strong></strong></p></td>
    <td width="72" valign="top"><p>URI</p></td>
    <td width="506" valign="top"><p><strong>Required. </strong>Location    of the JavaScript file. Will be used as the SRC attribute of the generated    &lt;script&gt; tag.<strong></strong></p></td>
  </tr>
</table>
<blockquote>
  <p><strong>Notes:</strong><br />
  (1) By default the HomePortals engine includes the following       Javascript files on the generated HTML:<br />
  <br />
    <em>&lt;HomePortals root&gt;</em>/Common/JavaScript/prototype-1.4.0_rc4.js<br />
  <em>&lt;HomePortals root&gt;</em>/Common/JavaScript/Main.js</p>
  <p>Main.js provides  several JavaScript functions used by HomePortals to control the functionality  of the generated output. These functions are also available to the developer.  Please see &ldquo;HomePortals JavaScript Function Reference&rdquo; for more information.</p>
  <p>(2) Prototype is a freely distributable JavaScript framework that aims to ease development of dynamic web applications. You may find more information on Prototype at <a href="http://prototype.conio.net/">http://prototype.conio.net/</a> </p>
</blockquote>
<hr />
<h3><a name="layout" id="layout">&lt;layout&gt;</a></h3>
<p><strong>Description:</strong><br />
  This tag is used to enclose the  region of the document where the page layout is described. May appear only once  per document.</p>
<p><strong>Attributes:</strong><br />
  <em>None</em></p>
<blockquote>
  <p><strong>Notes:</strong><br />
  (1) The following diagram shows the visual layout structure of the generated HTML:<br />
  <img src="HomePortalsXMLReference_clip_image001.gif" alt="Image1" width="307" height="364" border="0" /><br />
  <br />
  (2) Headers and Footers are rendered via &lt;div&gt;       tags, and Columns are rendered via &lt;td&gt; tags within 100% width       tables.<br />
  <br />
  (3) All display properties must be set via CSS</p>
</blockquote>
<hr />
<h3><a name="location" id="location">&lt;location&gt;</a></h3>
<p><strong>Description:</strong><br />
  Declares a layout region on the  screen. May be used several times, one for each region, and always as a child  of the &lt;layout&gt; tag</p>
<p><strong>Attributes:</strong></p>
<table border="1" cellspacing="0" cellpadding="0">
  <tr>
    <td width="87" valign="top"><strong>Name</strong> </td>
    <td width="136" valign="top"><p><strong>Type</strong></p></td>
    <td width="434" valign="top"><p><strong>Description</strong></p></td>
  </tr>
  <tr>
    <td width="87" valign="top"><p>Type<strong></strong></p></td>
    <td width="136" valign="top"><p>String.</p>
        <p>Values:</p>
          <li>Header</li>
        <li>Footer</li>
        <li>Column</li>
    </td>
    <td width="434" valign="top"><p><strong>Required. </strong>Describes    the type of region and determines how it will be rendered in the resulting    HTML document. <br />
      Headers and Footers are rendered as &lt;div&gt; tags.<br />
      All Columns are rendered as contiguous cells of a    &lt;table&gt; with 100% width and 0 border, 0 spacing and 0 padding.<strong></strong></p></td>
  </tr>
  <tr>
    <td width="87" valign="top"><p>Name</p></td>
    <td width="136" valign="top"><p>String<strong></strong></p></td>
    <td width="434" valign="top"><p><strong>Required. </strong>Name    used to identify this region elsewhere in the current document.<strong></strong></p></td>
  </tr>
  <tr>
    <td width="87" valign="top"><p>Class</p></td>
    <td width="136" valign="top"><p>CSS class name<strong></strong></p></td>
    <td width="434" valign="top"><p><strong>Optional.</strong> CSS    class for this layout region. Defaults to empty.<strong></strong></p></td>
  </tr>
  <tr>
    <td width="87" valign="top"><p>ID</p></td>
    <td width="136" valign="top"><p>DOM ID string<strong></strong></p></td>
    <td width="434" valign="top"><p><strong>Optional.</strong> DOM    ID for this layout region. Defaults to empty.<strong></strong></p></td>
  </tr>
</table>
<hr />
<h3><a name="modules" id="modules">&lt;modules&gt;</a></h3>
<p><strong>Description:</strong><br />
  This tag is used to enclose the region of the document where  the modules are declared. May appear only once per document</p>
<p><strong>Attributes:</strong></p>
<table border="1" cellspacing="0" cellpadding="0">
  <tr>
    <td width="87" valign="top"><strong>Name</strong> </td>
    <td width="104" valign="top"><p><strong>Type</strong></p></td>
    <td width="466" valign="top"><p><strong>Description</strong></p></td>
  </tr>
  <tr>
    <td width="87" valign="top"><p>BasePath<strong></strong></p></td>
    <td width="104" valign="top"><p>CF Mapping</p></td>
    <td width="466" valign="top"><p><strong>Optional. </strong>Tells    HomePortals a path that will be pre-pended to the page name given on each    individual module. This attribute is used as shorthand for cases in which all    modules are located on or around the same directory. <br />
      Defaults to empty. <strong></strong></p></td>
  </tr>
</table>
<hr />
<h3><a name="module" id="module">&lt;module&gt;</a></h3>
<p><strong>Description:</strong><br />
  Declares an individual module  that will be called by HomePortals. A module is just an html or cfm page.  Modules may or may not produce HTML  output. All HTML output will be displayed within &lt;div&gt; tags (module container DOM structure). All modules  must be assigned to a layout section in which they will be rendered. Modules appear on the page in the  same order in which they appear on the HomePortals XML document.</p>
<p><strong>Attributes:</strong></p>
<table border="1" cellspacing="0" cellpadding="0">
  <tr>
    <td width="103" valign="top"><strong>Name</strong> </td>
    <td width="136" valign="top"><p><strong>Type</strong></p></td>
    <td width="418" valign="top"><p><strong>Description</strong></p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>Name</p></td>
    <td width="136" valign="top"><p>String</p></td>
    <td width="418" valign="top"><p><strong>Required. </strong>Name of the  ColdFusion page that will implement the module. In a HomePortals page, you could use either internal or external modules. Internal modules are the ones located in the Module Library directory specified via the HomePortals Administrator or the HomePortals configuration file. Internal modules are named after the main module file name minus the cfm extension. </p>
      <p>External modules are any modules located outside the Module Library directory. To call external modules use the relative or absolute path to the file that implements the module.  If a BasePath is given in the &lt;modules&gt; tag, then HomePortals will locate the page given by this attribute starting on the path    given in BasePath.</p>
      <p>External modules may be local or remote. Local modules are located in the same server, remote modules are located in other servers and may be accessed by providing the full URL (starting with http://..) </p>
    <p>Internal and local modules are called via cfmodule, remote modules are called via cfhttp. </p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>Title</p></td>
    <td width="136" valign="top"><p>String</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>Title of the module. If Container is set to true, then    this title will be displayed on the title bar of the container.<br />
      Defaults to the value of the    Name attribute.</p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>Location</p></td>
    <td width="136" valign="top"><p>String </p></td>
    <td width="418" valign="top"><p><strong>Required. </strong>Identifies the name of the layout region in which the    output of this module will be rendered. Modules will be displayed int the layout    region in the order in which they appear on the HomePortals XML page.</p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>Container</p></td>
    <td width="136" valign="top"><p>Boolean</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>Indicates whether to render the output of the module    within an HTML container provided by the framework. <br />
      The container provides    features such as: displaying the module title, a button to expand/collapse the    module contents, and icons to perform special actions.<br />
      See below this table for a    representation of the structure of a container.<br />
      The appearance of the container    may be customized by the developer by overriding the appropriate CSS classes.    The original CSS classes are defined in the file &ldquo;/Common/CSS/Main.css&rdquo; of    the framework directory.<br />
      Default is &ldquo;True&rdquo;.</p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>ID</p></td>
    <td width="136" valign="top"><p>DOM ID</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>Sets the ID of the &lt;div&gt; enclosing the module contents.   <br />
      When no ID is provided, then    HomePortals generates an ID with the following structure:<br />
      &ldquo;h_&lt;<em>layout region name&gt;_&lt;Random number&gt;</em><br />
      The generated ID is passed to    the called module via the attributes scope.</p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>ShowPrint</p></td>
    <td width="136" valign="top"><p>Boolean</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>Controls whether to display the module icons. Module icons are defined for a particular module using the moduleIcon tag, or for all HomePortals pages via the HomePortals Administrator. Each icon is associated with a javascript function, to which the module id will be passed as its only parameter.</p>
      <p>By default a Printer icon appears on all containers. When clicked, HomePortals opens a new window with only the contents of the selected module.      </p>
      <p>To display module icons, the container attribute must be set to true. <br />
      Default is True.</p>
    </td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>Output</p></td>
    <td width="136" valign="top"><p>Boolean</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>This attribute is used to tell the framework that the    module will produce output to be displayed on the screen. Set this to false    for modules that only do server-side processing, or to avoid rendering any output. Default is True.</p></td>
  </tr>
</table>
<blockquote>
  <p><strong>Notes:</strong><br />
    (1) If no BasePath is given, and the Name attribute does       not start with a &ldquo;/&rdquo;, then the framework assumes that you are trying to       call one of the included modules, and searches for it in the &ldquo;Modules&rdquo;       directory of the framework directory. </p>
  <p>(2) Any other attribute defined on this tag will be       passed to the called module via the Attributes scope. This allows the       developer to customize modules for specific implementations by passing       different values as attributes. Also, the developer may pass more complex       data to the module by creating children nodes on the   &lt;module&gt; tag. </p>
  <p>(3) When the module is called. The framework passes the       following variables on the attributes scope:</p>
  <ul>
    <li><strong>Module</strong>: Contains a structure representing the XML        node of the current &lt;module&gt; tag in the HomePortals XML page (including        all attributes and child nodes).</li>
    <li><strong>ModuleID</strong>:  If the ID attribute        was present on the &lt;module&gt; tag, then this same value is passed, if        not, a value is generated automatically by the framework.</li>
  </ul>
  <p>&nbsp;</p>
</blockquote>
<ul type="disc">
  <li><strong>DOM/CSS Structure of the Container       Module:</strong></li>
</ul>
<p><img src="HomePortalsXMLReference_clip_image002.gif" alt="Image2" width="643" height="367" border="0" /></p>
<p>@ID: This is the ID attribute of the &lt;module&gt; tag.</p>
<hr />
<h3><a name="moduleIcon" id="moduleIcon">&lt;moduleIcon&gt;</a></h3>
<p><strong>Description:</strong><br />
  Use this tag to add additional  icons to the container&rsquo;s title bar. This tag should be a child of the  &lt;module&gt; tag to which you would like to add the icon. User-defined icons  are only displayed when the container for the module is being displayed. A module may have more than once modeleIcons</p>
<p><strong>Attributes:</strong></p>
<table border="1" cellspacing="0" cellpadding="0">
  <tr>
    <td width="103" valign="top"><strong>Name</strong> </td>
    <td width="136" valign="top"><p><strong>Type</strong></p></td>
    <td width="418" valign="top"><p><strong>Description</strong></p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>Alt</p></td>
    <td width="136" valign="top"><p>String</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>Alt Text for the icon&rsquo;s image.</p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>Image</p></td>
    <td width="136" valign="top"><p>String</p></td>
    <td width="418" valign="top"><p><strong>Required. </strong>URL of the icon&rsquo;s image.</p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>onClick</p></td>
    <td width="136" valign="top"><p>String</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>JavaScript expression/function to be executed when the    user clicks on the icon.</p></td>
  </tr>
</table>
<blockquote>
  <p><strong>Notes:</strong><br />
    (1) You may use the HomePortals administrator to change the module icons included on all rendered module. To access the HomePortals Administrator, go to <em>&lt;HomePortals root&gt;</em>/admin. Also you may change the module icons by manually edit the HomePortals configuration file. This is located at <em>&lt;HomePortals root&gt;</em>/config.xml.</p>
</blockquote>
<p>&nbsp;</p>
<hr />
<h3><a name="eventListeners" id="eventListeners">&lt;eventListeners&gt;</a></h3>
<p><strong>Description:</strong><br />
  This tag is used to enclose the  region of the document where the event listeners are listed. May appear only  once per document</p>
<p><strong>Attributes:</strong><br />
  <em>None</em></p>
<hr />
<h3><a name="event" id="event">&lt;event&gt;</a></h3>
<p><strong>Description:</strong><br />
  Use this tag to declare an event listener. Each event  listener indicates an action that should occur when a given event is fired.  Events are fired or raised by JavaScript code using the h_raiseEvent function,  or by the Server side components using the BaseRPC.raiseEvent method. </p>
<p><strong>Attributes:</strong></p>
<table border="1" cellspacing="0" cellpadding="0">
  <tr>
    <td width="103" valign="top"><strong>Name</strong> </td>
    <td width="136" valign="top"><p><strong>Type</strong></p></td>
    <td width="418" valign="top"><p><strong>Description</strong></p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>objectName</p></td>
    <td width="136" valign="top"><p>String</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>Name used to group events into logical categories. This    is so that the same event name may be used by several &ldquo;objects&rdquo; in the same    application.</p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>eventName</p></td>
    <td width="136" valign="top"><p>String</p></td>
    <td width="418" valign="top"><p><strong>Optional. </strong>Name of the event. This is used to identify a    particular event.</p></td>
  </tr>
  <tr>
    <td width="103" valign="top"><p>eventHandler</p></td>
    <td width="136" valign="top"><p>String</p></td>
    <td width="418" valign="top"><p><strong>Required. </strong>Name of the JavaScript function that will be called    when a event of the given objectName and eventName is raised. This function    will be passed any argument passed to the h_raiseEvent function.</p></td>
  </tr>
</table>
<blockquote>
  <p><strong>Notes:</strong><br />
    (1) Several       &lt;event&gt; tags may be used for the same object name and event name to       specify different actions that should occur whenever that event is fired.<strong>&nbsp;</strong></p>
</blockquote>
<br clear="all" />
<p>&nbsp;</p>

<p align="center" style="font-size:9px;">
(c)2006 <A href="http://www.cfempire.com" target="_blank">CFEmpire</A>
</p>
</body>
</html>
